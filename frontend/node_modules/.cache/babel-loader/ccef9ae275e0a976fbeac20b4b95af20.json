{"ast":null,"code":"var _jsxFileName = \"/home/filip/Desktop/facial-animation/src/components/Model.js\";\nimport React, { Component } from 'react';\nimport * as THREE from 'three';\nimport { GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader.js';\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls.js';\nimport { SkeletonUtils } from 'three/examples/jsm/utils/SkeletonUtils.js';\n\nclass Model extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      animationStatus: this.props.animationStatus,\n      intensity: this.props.sliderValue\n    };\n    this.visemes = undefined;\n    this.visemesNames = undefined;\n    this.move = 0.02;\n    this.delta = 0;\n    this.modelControlActive = false;\n    this.currentFrame = 1;\n    this.lidMove = 0.1;\n    this.lidSpeed = 0.1;\n    this.lidWait = 1;\n    this.exponent = 6;\n    this.obamaRatio = [0.8, 0.8];\n    this.start = this.start.bind(this);\n    this.animate = this.animate.bind(this);\n    this.onWindowResize = this.onWindowResize.bind(this);\n    this.addCube = this.addCube.bind(this);\n    this.addModel = this.addModel.bind(this);\n    this.getMouthControl = this.getModelControl.bind(this);\n    this.moveLid = this.moveLid.bind(this);\n    this.nextViseme = this.nextViseme.bind(this);\n    this.resetModel = this.resetModel.bind(this);\n  }\n\n  componentDidMount() {\n    const width = window.innerWidth;\n    const height = window.innerHeight;\n    this.scene = new THREE.Scene();\n    this.camera = new THREE.PerspectiveCamera(75, width / height, 0.1, 1000);\n    this.renderer = new THREE.WebGLRenderer({\n      antialias: true,\n      alpha: true\n    });\n    var light = new THREE.HemisphereLight(0xBEDDED, 0xDECADE, 0.55);\n    this.scene.add(light);\n    light = new THREE.SpotLight(0xffffff, 0.75);\n    light.position.set(-80, 100, 100);\n    light.castShadow = true;\n    this.scene.add(light);\n    this.addModel();\n    this.camera.position.z = 0.5;\n    this.camera.position.y = 0;\n    this.controls = new OrbitControls(this.camera, this.renderer.domElement);\n    this.controls.update();\n    this.renderer.setClearColor('#ffffff');\n    this.renderer.setSize(width, height);\n    window.addEventListener('resize', this.onWindowResize, false);\n    this.mount.appendChild(this.renderer.domElement);\n    this.start();\n  }\n\n  componentDidUpdate(prevProps) {\n    if (prevProps.animationStatus !== this.props.animationStatus) {\n      this.setState({\n        animationStatus: this.props.animationStatus\n      });\n    }\n\n    if (prevProps.visemes !== this.props.visemes) {\n      this.visemes = this.props.visemes;\n      this.visemesNames = [...new Set(this.props.visemes)];\n      this.currentFrame = 1;\n      console.log(this.visemes);\n      console.log(this.visemesNames);\n    }\n\n    if (prevProps.sliderValue !== this.props.sliderValue) {\n      this.setState({\n        intensity: this.props.sliderValue\n      });\n    }\n  }\n\n  addCube(x, y, z) {\n    var geometry = new THREE.BoxGeometry(.1, .1, .1);\n    geometry.translate(x, y, z);\n    var material = new THREE.MeshBasicMaterial({\n      color: '#433F81'\n    });\n    var cube = new THREE.Mesh(geometry, material);\n    this.scene.add(cube);\n  }\n\n  addModel() {\n    var loader = new GLTFLoader();\n    loader.load('model/head_visemes.gltf', gltf => {\n      this.model = SkeletonUtils.clone(gltf.scene);\n      console.log(this.model);\n      this.scene.add(this.model);\n      this.getModelControl();\n      this.renderScene();\n    }, undefined, function (error) {\n      console.error(error);\n    });\n  }\n\n  onWindowResize() {\n    this.camera.aspect = window.innerWidth / window.innerHeight;\n    this.camera.updateProjectionMatrix();\n    this.renderer.setSize(window.innerWidth, window.innerHeight);\n  }\n\n  componentWillUnmount() {\n    this.mount.removeChild(this.renderer.domElement);\n  }\n\n  start() {\n    if (!this.frameId) {\n      this.frameId = requestAnimationFrame(this.animate);\n    }\n  }\n\n  getModelControl() {\n    if (this.model) {\n      this.model.traverse(o => {\n        if (o.isMesh && o.name === 'head') {\n          this.modelControl = o.morphTargetInfluences;\n          this.modelControlDict = o.morphTargetDictionary;\n          this.modelControlActive = true;\n        }\n      });\n    }\n  }\n\n  calculateDistance(point1, point2) {\n    return Math.sqrt(Math.pow(point1[0] - point2[0], 2) + Math.pow(point1[1] - point2[1], 2));\n  }\n\n  moveLid() {\n    if (this.modelControl[this.modelControlDict['wink']] <= 0) {\n      if (this.lidWait > 100) {\n        this.lidMove = this.lidSpeed;\n        this.lidWait = 0;\n      } else {\n        this.lidMove = 0;\n      }\n\n      this.lidWait += 1;\n    } else if (this.modelControl[this.modelControlDict['wink']] > 1) {\n      this.lidMove = -this.lidMove;\n    }\n\n    this.modelControl[this.modelControlDict['wink']] = this.modelControl[this.modelControlDict['wink']] + this.lidMove;\n  }\n\n  nextViseme() {\n    if (this.currentFrame < 1) this.currentFrame = 1;\n    var currViseme = this.visemes[this.currentFrame];\n    var prevViseme = this.visemes[this.currentFrame - 1];\n\n    for (var visemeName of this.visemesNames) {\n      if (visemeName === currViseme) {\n        this.modelControl[this.modelControlDict[visemeName]] += this.state.intensity / this.exponent; //Math.pow(this.state.intensity, this.exponent)\n\n        if (this.modelControl[this.modelControlDict[visemeName]] > 1) this.modelControl[this.modelControlDict[visemeName]] = 1;\n      } else {\n        this.modelControl[this.modelControlDict[visemeName]] -= this.state.intensity / (10 - this.exponent); //Math.pow(this.state.intensity, this.exponent)\n\n        if (this.modelControl[this.modelControlDict[visemeName]] < 0) this.modelControl[this.modelControlDict[visemeName]] = 0;\n      }\n    }\n\n    if (currViseme === prevViseme) {\n      this.exponent -= 1;\n      if (this.exponent < 2) this.exponent = 2;\n    } else this.exponent = 8;\n  }\n\n  resetModel() {\n    this.lidWait = 0;\n\n    if (this.modelControl) {\n      for (var i = 0; i < this.modelControl.length; i++) {\n        this.modelControl[i] = 0;\n      }\n    }\n  }\n\n  animate() {\n    if (this.state.animationStatus === 'PLAY' && this.modelControlActive) {\n      this.nextViseme();\n      this.moveLid();\n\n      if (this.currentFrame >= this.visemes.length) {\n        this.currentFrame = 0;\n      }\n\n      this.currentFrame += 1;\n    } else if (this.state.animationStatus === \"STOP\") {\n      this.currentFrame = 1;\n      this.resetModel();\n    }\n\n    this.controls.update();\n    this.renderScene();\n    this.frameId = window.requestAnimationFrame(this.animate);\n  }\n\n  renderScene() {\n    this.renderer.render(this.scene, this.camera);\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      ref: mount => {\n        this.mount = mount;\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 245,\n        columnNumber: 9\n      }\n    });\n  }\n\n}\n\nexport default Model;","map":{"version":3,"sources":["/home/filip/Desktop/facial-animation/src/components/Model.js"],"names":["React","Component","THREE","GLTFLoader","OrbitControls","SkeletonUtils","Model","constructor","props","state","animationStatus","intensity","sliderValue","visemes","undefined","visemesNames","move","delta","modelControlActive","currentFrame","lidMove","lidSpeed","lidWait","exponent","obamaRatio","start","bind","animate","onWindowResize","addCube","addModel","getMouthControl","getModelControl","moveLid","nextViseme","resetModel","componentDidMount","width","window","innerWidth","height","innerHeight","scene","Scene","camera","PerspectiveCamera","renderer","WebGLRenderer","antialias","alpha","light","HemisphereLight","add","SpotLight","position","set","castShadow","z","y","controls","domElement","update","setClearColor","setSize","addEventListener","mount","appendChild","componentDidUpdate","prevProps","setState","Set","console","log","x","geometry","BoxGeometry","translate","material","MeshBasicMaterial","color","cube","Mesh","loader","load","gltf","model","clone","renderScene","error","aspect","updateProjectionMatrix","componentWillUnmount","removeChild","frameId","requestAnimationFrame","traverse","o","isMesh","name","modelControl","morphTargetInfluences","modelControlDict","morphTargetDictionary","calculateDistance","point1","point2","Math","sqrt","pow","currViseme","prevViseme","visemeName","i","length","render"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport * as THREE from 'three'\nimport { GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader.js';\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls.js'\nimport { SkeletonUtils } from 'three/examples/jsm/utils/SkeletonUtils.js'\n\n\nclass Model extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n        animationStatus: this.props.animationStatus,\n        intensity: this.props.sliderValue\n    }\n\n    this.visemes = undefined\n    this.visemesNames = undefined\n\n    this.move = 0.02\n    this.delta = 0\n\n    this.modelControlActive = false\n\n    this.currentFrame = 1\n\n    this.lidMove = 0.1\n    this.lidSpeed = 0.1\n    this.lidWait = 1\n\n    this.exponent = 6\n\n    this.obamaRatio = [0.8, 0.8]\n\n    this.start = this.start.bind(this)\n    this.animate = this.animate.bind(this)\n    this.onWindowResize = this.onWindowResize.bind(this)\n    this.addCube = this.addCube.bind(this)\n    this.addModel = this.addModel.bind(this)\n    this.getMouthControl = this.getModelControl.bind(this)\n    this.moveLid = this.moveLid.bind(this)\n    this.nextViseme = this.nextViseme.bind(this)\n    this.resetModel = this.resetModel.bind(this)\n  }\n\n  componentDidMount() {\n    const width = window.innerWidth\n    const height = window.innerHeight\n\n    this.scene = new THREE.Scene()\n    this.camera = new THREE.PerspectiveCamera(\n      75,\n      width / height,\n      0.1,\n      1000\n    )\n    this.renderer = new THREE.WebGLRenderer({ antialias: true , alpha:true})\n\n    var light = new THREE.HemisphereLight(0xBEDDED, 0xDECADE, 0.55);\n    this.scene.add(light)\n    light = new THREE.SpotLight(0xffffff, 0.75);\n    light.position.set(-80,100,100);\n    light.castShadow = true;\n    this.scene.add(light)\n\n    this.addModel()\n\n    this.camera.position.z = 0.5\n    this.camera.position.y = 0\n\n    this.controls = new OrbitControls(this.camera, this.renderer.domElement);\n    this.controls.update();\n\n    this.renderer.setClearColor('#ffffff')\n    this.renderer.setSize(width, height)\n\n    window.addEventListener('resize', this.onWindowResize, false);\n\n    this.mount.appendChild(this.renderer.domElement)\n\n    this.start()\n  }\n\n  componentDidUpdate(prevProps){\n      if(prevProps.animationStatus !== this.props.animationStatus){\n          this.setState({\n              animationStatus: this.props.animationStatus\n          })\n      }\n      if(prevProps.visemes !== this.props.visemes){\n        this.visemes = this.props.visemes\n        this.visemesNames = [...new Set(this.props.visemes)]\n        this.currentFrame = 1\n        console.log(this.visemes)\n        console.log(this.visemesNames)\n    }\n    if(prevProps.sliderValue !== this.props.sliderValue){\n      this.setState({\n        intensity: this.props.sliderValue\n      })\n    }\n  }\n\n\n  addCube(x, y, z) {\n    var geometry = new THREE.BoxGeometry(.1,.1,.1)\n    geometry.translate(x, y, z)\n    var material = new THREE.MeshBasicMaterial({ color: '#433F81' })\n    var cube = new THREE.Mesh(geometry, material)\n    this.scene.add(cube)\n  }\n\n  addModel() {\n    var loader = new GLTFLoader();\n\n    loader.load('model/head_visemes.gltf', gltf => {\n      this.model = SkeletonUtils.clone(gltf.scene)\n      console.log(this.model)\n      this.scene.add(this.model)\n      this.getModelControl()\n      this.renderScene()\n    }, undefined, function (error) {\n      console.error(error);\n    }\n    )\n  }\n\n  onWindowResize() {\n    this.camera.aspect = window.innerWidth / window.innerHeight;\n    this.camera.updateProjectionMatrix();\n\n    this.renderer.setSize(window.innerWidth, window.innerHeight);\n\n  }\n\n  componentWillUnmount() {\n    this.mount.removeChild(this.renderer.domElement)\n  }\n\n  start() {\n    if (!this.frameId) {\n      this.frameId = requestAnimationFrame(this.animate)\n    }\n  }\n\n\n  getModelControl() {\n    if (this.model) {\n      this.model.traverse(o => {\n        if (o.isMesh && o.name === 'head') {\n          this.modelControl = o.morphTargetInfluences;\n          this.modelControlDict = o.morphTargetDictionary;\n          this.modelControlActive = true\n        }\n      })\n    }\n  }\n\n\n  calculateDistance(point1, point2) {\n    return Math.sqrt(Math.pow(point1[0] - point2[0], 2) + Math.pow(point1[1] - point2[1], 2))\n  }\n\n\n  moveLid(){\n    if(this.modelControl[this.modelControlDict['wink']] <= 0){\n      if (this.lidWait > 100){\n        this.lidMove = this.lidSpeed;\n        this.lidWait = 0\n      }\n      else {\n        this.lidMove = 0\n      }\n      this.lidWait += 1\n    }\n    else if (this.modelControl[this.modelControlDict['wink']] > 1) {\n      this.lidMove = -this.lidMove;\n    }\n\n    this.modelControl[this.modelControlDict['wink']] = this.modelControl[this.modelControlDict['wink']] + this.lidMove;\n  }\n\n  nextViseme(){\n    if(this.currentFrame < 1)\n      this.currentFrame = 1\n\n    var currViseme = this.visemes[this.currentFrame]\n    var prevViseme = this.visemes[this.currentFrame-1]\n    for(var visemeName of this.visemesNames){\n      if(visemeName === currViseme){\n        this.modelControl[this.modelControlDict[visemeName]] += this.state.intensity / this.exponent //Math.pow(this.state.intensity, this.exponent)\n        if(this.modelControl[this.modelControlDict[visemeName]]>1)\n          this.modelControl[this.modelControlDict[visemeName]] = 1\n      }\n      else{\n        this.modelControl[this.modelControlDict[visemeName]] -= this.state.intensity / (10-this.exponent) //Math.pow(this.state.intensity, this.exponent)\n        if(this.modelControl[this.modelControlDict[visemeName]]<0)\n          this.modelControl[this.modelControlDict[visemeName]] = 0\n      }\n    }\n\n    if(currViseme === prevViseme){\n      this.exponent -= 1\n      if(this.exponent < 2) this.exponent = 2;\n    }\n    else\n      this.exponent = 8\n  }\n\n  resetModel(){\n    this.lidWait = 0\n    if(this.modelControl){\n      for(var i=0; i<this.modelControl.length; i++){\n        this.modelControl[i] = 0;\n      }\n    }\n  }\n\n  animate() {\n    if (this.state.animationStatus === 'PLAY' && this.modelControlActive) {\n      this.nextViseme()\n      this.moveLid()\n\n      if (this.currentFrame >= this.visemes.length) {\n        this.currentFrame = 0\n      }\n\n      this.currentFrame += 1\n    }\n    else if(this.state.animationStatus === \"STOP\"){\n        this.currentFrame = 1\n        this.resetModel()\n    }\n\n    this.controls.update()\n    this.renderScene()\n    this.frameId = window.requestAnimationFrame(this.animate)\n  }\n\n  renderScene() {\n    this.renderer.render(this.scene, this.camera)\n  }\n\n  render() {\n    return (\n        <div\n          ref={(mount) => { this.mount = mount }}\n        />\n    )\n  }\n}\n\nexport default Model"]},"metadata":{},"sourceType":"module"}